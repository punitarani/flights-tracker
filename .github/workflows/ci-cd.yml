name: CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  APP_URL: ${{ secrets.APP_URL }}
  WORKER_URL: ${{ secrets.WORKER_URL }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
  RESEND_FROM_EMAIL: ${{ secrets.RESEND_FROM_EMAIL }}
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY }}
  SUPABASE_SECRET_KEY: ${{ secrets.SUPABASE_SECRET_KEY }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
  SEATS_AERO_API_KEY: ${{ secrets.SEATS_AERO_API_KEY }}
  WORKER_API_KEY: ${{ secrets.WORKER_API_KEY }}
  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  SENTRY_ENVIRONMENT: workers-production
  PROXY_ENABLED: ${{ secrets.PROXY_ENABLED }}
  PROXY_PROTOCOL: ${{ secrets.PROXY_PROTOCOL }}
  PROXY_HOST: ${{ secrets.PROXY_HOST }}
  PROXY_PORT: ${{ secrets.PROXY_PORT }}
  PROXY_USERNAME: ${{ secrets.PROXY_USERNAME }}
  PROXY_PASSWORD: ${{ secrets.PROXY_PASSWORD }}
  NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
  NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY }}
  NEXT_PUBLIC_MAPKIT_TOKEN: ${{ secrets.NEXT_PUBLIC_MAPKIT_TOKEN }}
  NEXT_TELEMETRY_DISABLED: "1"
  CI: "1"

jobs:
  quality:
    name: Format & Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: "1.3.0"

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            ~/.cache/bun
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Check formatting
        run: |
          bunx biome format --write
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "::error::Formatting issues detected. Run 'bun run format' locally."
            git diff
            exit 1
          fi

      - name: Check linting
        run: |
          bunx biome check --write --unsafe
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "::error::Lint issues detected. Run 'bun run lint' locally."
            git diff
            exit 1
          fi

  build:
    name: ${{ matrix.name }}
    runs-on: ubuntu-latest
    needs:
      - quality
    strategy:
      fail-fast: false
      matrix:
        include:
          - id: next-app
            name: Next.js Build
            run: bunx next build
          - id: workers
            name: Cloudflare Workers Dry Run
            run: bunx wrangler deploy --dry-run
          - id: production-script
            name: Production Build Script
            run: bun run build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: "1.3.0"

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            ~/.cache/bun
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: ${{ matrix.name }}
        run: ${{ matrix.run }}

  db-migrate:
    name: Database Migration
    runs-on: ubuntu-latest
    needs:
      - build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: "1.3.0"

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            ~/.cache/bun
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Validate migrations (non-main)
        if: github.ref != 'refs/heads/main'
        run: bunx drizzle-kit check

      - name: Run migrations
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: bun run db:migrate

  tests:
    name: ${{ matrix.name }}
    runs-on: ubuntu-latest
    needs:
      - db-migrate
    strategy:
      fail-fast: false
      matrix:
        include:
          - id: core
            name: Core Tests
            run: bun run test
          - id: workers
            name: Worker Tests
            run: bun run test:workers
          - id: fli
            name: FLI Integration Tests
            run: bun run test:fli
          - id: seats-aero
            name: Seats.aero Focused Tests
            run: bun test --concurrent --timeout 100000 --preload ./src/test/setup.ts src/lib/fli/__tests__/seats-aero

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: "1.3.0"

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            ~/.cache/bun
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: ${{ matrix.name }}
        run: ${{ matrix.run }}

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: read
      statuses: write
    needs:
      - quality
      - build
      - db-migrate
      - tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: "1.3.0"

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            ~/.cache/bun
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Deploy to Cloudflare Workers
        id: deploy
        run: |
          # Create version with descriptive message and tag
          COMMIT_SHORT="${GITHUB_SHA:0:7}"
          COMMIT_MSG=$(git log -1 --pretty=%B | head -n1)
          DEPLOY_TAG="${GITHUB_REF_NAME}-${GITHUB_RUN_NUMBER}-${COMMIT_SHORT}"
          DEPLOY_MESSAGE="Deploy #${GITHUB_RUN_NUMBER} from ${GITHUB_REF_NAME} by ${GITHUB_ACTOR}: ${COMMIT_MSG}"

          echo "Deploying with tag: ${DEPLOY_TAG}"
          echo "Message: ${DEPLOY_MESSAGE}"

          # Upload version with metadata
          VERSION_OUTPUT=$(bunx wrangler versions upload \
            --message "${DEPLOY_MESSAGE}" \
            --tag "${DEPLOY_TAG}" \
            --json)

          VERSION_ID=$(echo "${VERSION_OUTPUT}" | jq -r '.id')
          echo "Uploaded version: ${VERSION_ID}"

          # Deploy the version
          bunx wrangler versions deploy "${VERSION_ID}" --percentage 100

          echo "version_id=${VERSION_ID}" >> $GITHUB_OUTPUT
          echo "deploy_tag=${DEPLOY_TAG}" >> $GITHUB_OUTPUT
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          APP_URL: ${{ secrets.APP_URL }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          RESEND_FROM_EMAIL: ${{ secrets.RESEND_FROM_EMAIL }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY }}
          SUPABASE_SECRET_KEY: ${{ secrets.SUPABASE_SECRET_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SEATS_AERO_API_KEY: ${{ secrets.SEATS_AERO_API_KEY }}
          WORKER_API_KEY: ${{ secrets.WORKER_API_KEY }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ENVIRONMENT: workers-production
          PROXY_ENABLED: ${{ secrets.PROXY_ENABLED }}
          PROXY_PROTOCOL: ${{ secrets.PROXY_PROTOCOL }}
          PROXY_HOST: ${{ secrets.PROXY_HOST }}
          PROXY_PORT: ${{ secrets.PROXY_PORT }}
          PROXY_USERNAME: ${{ secrets.PROXY_USERNAME }}
          PROXY_PASSWORD: ${{ secrets.PROXY_PASSWORD }}

      - name: Log deployment details
        run: |
          echo "âœ… Deployment complete!"
          echo "Version ID: ${{ steps.deploy.outputs.version_id }}"
          echo "Deploy Tag: ${{ steps.deploy.outputs.deploy_tag }}"

      - name: Notify Vercel
        uses: vercel/repository-dispatch/actions/status@v1
        with:
          name: 'Vercel - flights-tracker: build'
